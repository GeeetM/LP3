'''Non recursive fibonacci'''
def fibonacci_non_recursive(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]

    fibonacci_list = [0, 1]
    for i in range(2, n):
        next_fib = fibonacci_list[-1] + fibonacci_list[-2]
        fibonacci_list.append(next_fib)
    return fibonacci_list

# User input for the non-recursive program
n = int(input("Enter the number of Fibonacci numbers to generate: "))
fibonacci_numbers = fibonacci_non_recursive(n)
print(f"Fibonacci numbers: {fibonacci_numbers}")


'''Recursive Fibonacci'''
def fibonacci_recursive(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        prev_fib = fibonacci_recursive(n - 1)
        next_fib = prev_fib[-1] + prev_fib[-2]
        return prev_fib + [next_fib]

# User input for the recursive program
n = int(input("Enter the number of Fibonacci numbers to generate: "))
fibonacci_numbers = fibonacci_recursive(n)
print(f"Fibonacci numbers: {fibonacci_numbers}")

Theory:
Time and Space Complexity Analysis:

Non-Recursive (Iterative) Fibonacci:

Time Complexity: O(n) - It computes Fibonacci numbers up to the given 'n' in a single pass through a loop.
Space Complexity: O(n) - The space required is linear because we store the entire Fibonacci sequence up to 'n' in a list.
Recursive Fibonacci:

Time Complexity: O(2^n) - The recursive function has exponential time complexity because it recalculates Fibonacci numbers multiple times.
Space Complexity: O(n) - The space complexity is linear because it uses a recursive call stack, which can go up to 'n' levels deep.
The non-recursive approach is much more efficient in terms of time complexity, especially for large 'n', as it avoids redundant calculations. The recursive approach has an exponential time complexity and should be avoided for large inputs.


Recursive Program:

A recursive program is one that solves a problem by breaking it down into smaller instances of the same problem until a base case is reached and can be solved directly.
In a recursive program, a function calls itself with modified arguments, and this process continues until the base case is met.
Recursion is often used to solve problems that exhibit a natural recursive structure, like problems involving tree structures or sequences.
Recursion can be an elegant way to solve certain problems, but it may consume more memory due to the function call stack.

Non-Recursive (Iterative) Program:

A non-recursive program, also known as an iterative program, solves a problem using loops and does not rely on function calls to itself.
It involves a step-by-step approach to solving a problem, where you typically use loops (e.g., for loops, while loops) and variables to keep track of the state of the program.
Non-recursive programs are often used when the problem can be solved more efficiently and with less overhead by using loops.
They are typically more memory-efficient because they do not rely on a call stac

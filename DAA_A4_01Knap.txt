def knapsack_dynamic_programming(weights, values, capacity):
    n = len(weights)
    # Initialize a table to store the maximum values for different subproblems
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    # Fill the table using dynamic programming
    for i in range(n + 1):
        for w in range(capacity + 1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif weights[i - 1] <= w:
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])
            else:
                dp[i][w] = dp[i - 1][w]

    # Find the items selected in the knapsack
    selected_items = []
    i, j = n, capacity
    while i > 0 and j > 0:
        if dp[i][j] != dp[i - 1][j]:
            selected_items.append(i - 1)
            j -= weights[i - 1]
        i -= 1

    selected_items.reverse()
    return dp[n][capacity], selected_items

if __name__ == "__main__":
    num_items = int(input("Enter the number of items: "))
    capacity = int(input("Enter the knapsack capacity: "))

    weights = []
    values = []

    for i in range(num_items):
        weight = int(input(f"Enter the weight of item {i + 1}: "))
        value = int(input(f"Enter the value of item {i + 1}: "))
        weights.append(weight)
        values.append(value)

    max_value, selected_items = knapsack_dynamic_programming(weights, values, capacity)

    print(f"Maximum value in the knapsack: {max_value}")
    print("Items selected in the knapsack:")
    for item in selected_items:
        print(f"Item {item + 1} - Weight: {weights[item]}, Value: {values[item]}")
